[tool.poetry]
name = "app"
version = "0.1.0"
description = ""
authors = ["Your Name <you@example.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.13"
fastapi = {extras = ["all"], version = "^0.115.5"}
sqlmodel = "^0.0.22"
uvicorn = "^0.32.1"
filetype = "^1.2.0"
pg8000 = "^1.31.2"
python-jose = "^3.3.0"
pyjwt = {extras = ["crypto"], version = "^2.10.1"}
bcrypt = "^4.2.1"
coloredlogs = "^15.0.1"

[tool.poetry.group.dev.dependencies]
pip-licenses = "^5.0.0"
ruff = "^0.8.0"
pipdeptree = "^2.24.0"
pytest = "^8.3.3"
pytest-cov = "^6.0.0"
mypy = "^1.13.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py313"
lint.select = [
    "ALL"
]
lint.ignore = [
    "E501",    # pycodestyle Error: line-too-long
    "D100",    # pydocstyle: Missing docstring in public module
    "D101",    # pydocstyle: Missing docstring in public class
    "D102",    # pydocstyle: Missing docstring in public method
    "D103",    # pydocstyle: Missing docstring in public function
    "D104",    # pydocstyle: Missing docstring in public package
    "D105",    # pydocstyle: Missing docstring in magic method
    "D107",    # pydocstyle: Missing docstring in __init__
    "D400",    # pydocstyle: First line should end with a period
    "UP040",   # pyupgrade: non-pep695-type-alias  # TODO: mypyがPEP 695 type aliasesに対応したら有効にする
    "COM812",  # flake8-commas: missing-trailing-comma  # ruff formatterとコンフリクトする
    "ISC001",  # flake8-implicit-str-concat: single-line-implicit-string-concatenation # ruff formatterとコンフリクトする
    "TD003",   # flake8-todos: missing-todo-link  # TODO: ある程度モジュールが完成したら有効にする
    "FIX002",  # flake8-fixme: line-contains-todo # TODO: ある程度モジュールが完成したら有効にする
    "ERA001",  # eradicate: commented-out-code  # TODO: ある程度モジュールが完成したら有効にする
    
    "D203",    # （D211と競合）クラス docstring の前に空行を追加しない。
    "D212",    # （D213と競合）複数行の docstring の最初の行を概要にしない。

    "RUF001",  # 全角記号など`ambiguous unicode character`を許容
    "RUF002",  # 全角記号など`ambiguous unicode character`を許容
    "RUF003",  # 全角記号など`ambiguous unicode character`を許容
    "F403",    # from module import * を許容
    "T20",     # flake8-print # TODO print検出したい場合に有効化する。
]
lint.fixable = ["ALL"]

# Exclude a variety of commonly ignored directories.
exclude = [".venv", "venv", "tests/"]

[tool.ruff.lint.flake8-bugbear]
# FastAPI仕様の"B008"対策
extend-immutable-calls = ["fastapi.Depends", "fastapi.params.Depends", "fastapi.Query", "fastapi.params.Query"]

[tool.ruff.lint.pep8-naming]
# pydanticのvalidatorによる"N805"対応
classmethod-decorators = ["classmethod", "pydantic.validator"]

[tool.mypy]
# チェックするファイルまたはディレクトリを指定
files = ["./app", "./migrations"]

# 無視したいファイルやディレクトリ
exclude = "^(\\.venv|\\.env|build|dist|__pycache__|tests/)"

# 型チェックを厳密にする
strict = true

# 型が見つからない場合のエラーを無効化
ignore_missing_imports = true

# 未使用の型ヒントを警告
warn_unused_ignores = true

# pydantic用の設定追加
plugins = ["pydantic.mypy"]

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::DeprecationWarning" # Deprecatedによる警告を無視する
]

[tool.coverage.report]
# 以下の項目についてのcoverageをスキップ
exclude_lines = [
    "pass",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
omit = [
    "app/ddd/presentation/endpoint/page/*" # デバッグ用の簡易フロントエンドなので無視
]
