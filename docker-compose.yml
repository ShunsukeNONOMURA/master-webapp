services:
  backend:
    build: ./backend
    working_dir: '/root/volumes'
    tty: true
    volumes:
      - ./backend/volumes:/root/volumes
      - ./docs/backend:/root/docs/backend
    # network_mode: "host"
    ports:
      - 8000:8000
    env_file:
      - ./backend/.env
    extra_hosts: # linux環境の場合にhost.docker.internalでhost上にアクセスするために必要
      - "host.docker.internal:host-gateway"
    networks:
      - master_webapp_network
  postgres:
    build: ./rdb/postgresql
    # restart: always
    ports: 
      - "5432:5432"
    volumes:
      # ストレージのマウント
      - ./rdb/postgresql/data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    networks:
      - master_webapp_network
  # tika: 
  #   image: imixs/tika
  #   ports:
  #     - "9998:9998"
  #   networks:
  #     - master_webapp_network

  keycloak:
    build:
      context: ./sso/keycloak
      dockerfile: Dockerfile
    tty: true
    stdin_open: true
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_REALM_IMPORT_FILE: /opt/keycloak/data/realm-export.json
    volumes:
      - ./sso/keycloak/import:/opt/keycloak/data/import:ro
    ports:
      - 38080:8080
    command:
      - "--verbose"
      - "start-dev"
      - "--import-realm" # 開発モードで起動
    networks:
      - master_webapp_network

  mkdocs:
    build:
      context: ./documentation/mkdocs
      dockerfile: Dockerfile
    tty: true
    stdin_open: true
    ports:
      - "48080:48080"
    working_dir: /root/projects/volume
    command: mkdocs serve
    volumes:
      - type: bind
        source: "./documentation/mkdocs/volume"
        target: "/root/projects/volume"
      - type: bind # build先
        source: "./docs/mkdocs"
        target: "/root/projects/volume/site"

networks:
  master_webapp_network:
    driver: bridge